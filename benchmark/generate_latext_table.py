import yaml
import pandas as pd
import argparse
import os

def generate_latex_from_metrics(metric_file_path, output_path=None):
    """
    Reads a YAML metrics file and generates a LaTeX formatted table.
    
    Args:
        metric_file_path (str): The path to the metrics.yaml file.
        output_path (str, optional): If provided, saves the LaTeX table to this file. 
                                     Otherwise, prints to console. Defaults to None.
    """
    if not os.path.exists(metric_file_path):
        raise FileNotFoundError(f"Metric file not found at: {metric_file_path}")

    with open(metric_file_path, 'r') as f:
        metrics_data = yaml.safe_load(f)

    # --- Prepare data for DataFrame ---
    table_data = []
    for dataset_name, metrics in metrics_data.items():
        # Handle single-class datasets
        if metrics.get('eer', -1) == -1:
            # Accuracy is still valid for single-class datasets
            row = {
                'Dataset': dataset_name,
                'EER (%)': 'N/A',
                'AUC': 'N/A',
                'Accuracy (%)': metrics.get('accuracy', 0) * 100,
                'TPR (%)': 'N/A',
                'TNR (%)': 'N/A'
            }
        else:
            row = {
                'Dataset': dataset_name,
                'EER (%)': metrics['eer'] * 100,
                'AUC': metrics['auc'],
                'Accuracy (%)': metrics['accuracy'] * 100,
                'TPR (%)': metrics['tpr'] * 100,
                'TNR (%)': metrics['tnr'] * 100
            }
        table_data.append(row)

    if not table_data:
        print("No data to generate table.")
        return

    df = pd.DataFrame(table_data)
    df.set_index('Dataset', inplace=True)

    # --- Calculate Average for numeric columns ---
    # Convert 'N/A' to NaN to ignore them in mean calculation
    df_numeric = df.apply(pd.to_numeric, errors='coerce')
    # Check if there is anything to average after dropping rows that are all NaN
    if not df_numeric.empty and not df_numeric.dropna(how='all').empty:
        avg_row = df_numeric.mean().to_frame().T
        # Use a bold-faced index for the average row
        avg_row.index = ['\\textbf{Average}']
        
        # Format the numbers in the original DataFrame before adding the average
        float_format_map = {
            'EER (%)': "{:.2f}", 'AUC': "{:.4f}", 'Accuracy (%)': "{:.2f}",
            'TPR (%)': "{:.2f}", 'TNR (%)': "{:.2f}",
        }

        for col, fmt in float_format_map.items():
            if col in df.columns:
                # Apply formatting, keeping 'N/A' as is
                df[col] = df[col].apply(lambda x: fmt.format(x) if isinstance(x, (int, float)) else x)
                # Format the average row separately
                if col in avg_row.columns:
                    avg_row[col] = avg_row[col].apply(lambda x: fmt.format(x) if pd.notna(x) else 'N/A')

        # Append the formatted average row
        df = pd.concat([df, avg_row])

    # --- Generate and print LaTeX table ---
    latex_string = df.to_latex(
        escape=False, # To allow for \textbf in the index
        na_rep='N/A'   # How to represent missing values
    )
    
    if output_path:
        with open(output_path, 'w') as f:
            f.write(latex_string)
        print(f"\nLaTeX table successfully saved to: {output_path}")
    else:
        print("-" * 80)
        print("LaTeX Table ready for your paper:")
        print("-" * 80)
        print(latex_string)
        print("-" * 80)
        print("Usage: Just copy and paste the code between the lines into your .tex file.")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description="Generate a LaTeX table from a saved metrics YAML file.")
    parser.add_argument('metric_file', type=str, help="Path to the metrics YAML file generated by evaluate.py.")
    parser.add_argument('--output_path', type=str, help="Optional path to save the .tex file.")
    args = parser.parse_args()
    
    generate_latex_from_metrics(args.metric_file, args.output_path)

